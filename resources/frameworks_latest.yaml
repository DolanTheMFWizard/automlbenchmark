---
#
#  Please note: frameworks defined in this file are all set to "latest" which is usually not be a stable/release version
#  but rather the current state of `master` branch for example or the last nightly build.
#

#########################
### AutoML frameworks ###
#########################

AutoGluon:
  version: "latest"

AutoGluon_bestquality:
  extends: AutoGluon
  params:
    presets: best_quality

AutoGluon_fastai:
  extends: AutoGluon
  params:
    hyperparameters: {
      'NN': { },
      'GBM': [
        { },
        { 'extra_trees': True, 'AG_args': { 'name_suffix': 'XT' } },
      ],
      'CAT': { },
      'XGB': { },
      'RF': [
        { 'criterion': 'gini', 'AG_args': { 'name_suffix': 'Gini', 'problem_types': [ 'binary', 'multiclass' ] } },
        { 'criterion': 'entropy', 'AG_args': { 'name_suffix': 'Entr', 'problem_types': [ 'binary', 'multiclass' ] } },
        { 'criterion': 'mse', 'AG_args': { 'name_suffix': 'MSE', 'problem_types': [ 'regression' ] } },
      ],
      'XT': [
        { 'criterion': 'gini', 'AG_args': { 'name_suffix': 'Gini', 'problem_types': [ 'binary', 'multiclass' ] } },
        { 'criterion': 'entropy', 'AG_args': { 'name_suffix': 'Entr', 'problem_types': [ 'binary', 'multiclass' ] } },
        { 'criterion': 'mse', 'AG_args': { 'name_suffix': 'MSE', 'problem_types': [ 'regression' ] } },
      ],
      'KNN': [
        { 'weights': 'uniform', 'AG_args': { 'name_suffix': 'Unif' } },
        { 'weights': 'distance', 'AG_args': { 'name_suffix': 'Dist' } },
      ],
      'FASTAI': { },
      'custom': [ 'GBM' ],
    }

AutoGluon_bestquality_fastai:
  extends: AutoGluon
  params:
    presets: best_quality
    hyperparameters: {
      'NN': { },
      'GBM': [
        { },
        { 'extra_trees': True, 'AG_args': { 'name_suffix': 'XT' } },
      ],
      'CAT': { },
      'XGB': { },
      'RF': [
        { 'criterion': 'gini', 'AG_args': { 'name_suffix': 'Gini', 'problem_types': [ 'binary', 'multiclass' ] } },
        { 'criterion': 'entropy', 'AG_args': { 'name_suffix': 'Entr', 'problem_types': [ 'binary', 'multiclass' ] } },
        { 'criterion': 'mse', 'AG_args': { 'name_suffix': 'MSE', 'problem_types': [ 'regression' ] } },
      ],
      'XT': [
        { 'criterion': 'gini', 'AG_args': { 'name_suffix': 'Gini', 'problem_types': [ 'binary', 'multiclass' ] } },
        { 'criterion': 'entropy', 'AG_args': { 'name_suffix': 'Entr', 'problem_types': [ 'binary', 'multiclass' ] } },
        { 'criterion': 'mse', 'AG_args': { 'name_suffix': 'MSE', 'problem_types': [ 'regression' ] } },
      ],
      'KNN': [
        { 'weights': 'uniform', 'AG_args': { 'name_suffix': 'Unif' } },
        { 'weights': 'distance', 'AG_args': { 'name_suffix': 'Dist' } },
      ],
      'FASTAI': { },
      'custom': [ 'GBM' ],
    }

autosklearn:
  version: 'latest'

autosklearn2:
  extends: autosklearn
  params:
    _askl2: true

AutoWEKA:
  version: 'latest'

autoxgboost:
  version: 'latest'

GAMA:
  version: 'latest'

H2OAutoML:
  version: 'latest'

hyperoptsklearn:
  version: 'latest'

lightautoml:
  version: 'latest'

mljarsupervised:
  version: 'latest'

mljarsupervised_compete:
  extends: mljarsupervised
  params:
    mode: Compete   # set mode for Compete, default mode is Explain

MLPlan:
  version: 'latest'

MLPlanSKLearn:
  extends: MLPlan
  params:
    _backend: sklearn

MLPlanWEKA:
  extends: MLPlan
  params:
    _backend: weka

oboe:
  version: 'latest'

TPOT:
  version: 'latest'




#######################################
### Non AutoML reference frameworks ###
#######################################

constantpredictor: {}

constantpredictor_enc:
  extends: constantpredictor
  params:
    encode: true

DecisionTree:
  version: 'latest'

RandomForest:
  version: 'latest'
  params:
    n_estimators: 2000

ranger:
  version: 'latest'

TunedRandomForest:
  version: 'latest'
  params:
    n_estimators: 2000

